{
	"info": {
		"_postman_id": "bc37f675-8f42-4821-a57a-5f3a77b94b2c",
		"name": "MyPlace-mp-profile",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23050345"
	},
	"item": [
		{
			"name": "geo",
			"item": [
				{
					"name": "country",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "Country create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Country fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const countryCode = pm.variables.get(\"local_countryCode\");",
													"    const countryName = pm.variables.get(\"local_countryName\");",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.code).to.eql(countryCode);",
													"    pm.expect(jsonData.name).to.eql(countryName);",
													"    ",
													"    pm.collectionVariables.set('coll_countryID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"code\": \"{{local_countryCode}}\",\n  \"name\": \"{{local_countryName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/countries",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"countries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/countries/{{coll_countryID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"countries",
												"{{coll_countryID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country create agen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Country fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const countryCode = pm.variables.get(\"local_countryCode\");",
													"    const countryName = pm.variables.get(\"local_countryName\");",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.code).to.eql(countryCode);",
													"    pm.expect(jsonData.name).to.eql(countryName);",
													"    ",
													"    pm.collectionVariables.set('coll_countryID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"code\": \"{{local_countryCode}}\",\n  \"name\": \"{{local_countryName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/countries",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"countries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country create with other code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"code\": \"{{local_countryCode_other}}\",\n  \"name\": \"{{local_countryName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/countries",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"countries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country create with same code and name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"code\": \"{{local_countryCode}}\",\n  \"name\": \"{{local_countryName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/countries",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"countries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Country fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const countryName = pm.variables.get(\"local_countryName_patched\");",
													"    pm.expect(jsonData.name).to.eql(countryName);",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{local_countryName_patched}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/countries/{{coll_countryID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"countries",
												"{{coll_countryID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "private",
							"item": [
								{
									"name": "Country findAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check countries list length\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.content.length).to.be.gte(1);",
													"",
													"    console.log(\"Length of jsonData.content:\", jsonData.content.length);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/user/geo/countries",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"user",
												"geo",
												"countries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Country getById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/user/geo/countries/{{coll_countryID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"user",
												"geo",
												"countries",
												"{{coll_countryID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.variables.set(\"local_countryCode\", \"RU\");",
									"pm.variables.set(\"local_countryName\", \"test_Russia\");",
									"",
									"pm.variables.set(\"local_countryCode_other\", \"RR\");",
									"pm.variables.set(\"local_countryName_other\", \"test_Russia_other\");",
									"",
									"pm.variables.set(\"local_countryName_patched\", \"test_Russia_patched\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "region",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "Region create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Region fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const countryID = pm.variables.get(\"local_countryID\");",
													"    const regionName = pm.variables.get(\"local_regionName\");",
													"",
													"    console.log(\"countryID (variable):\", countryID, \"Type:\", typeof countryID);",
													"    console.log(\"jsonData.country.id:\", jsonData.country.id, \"Type:\", typeof jsonData.country.id);",
													"",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.country.id).to.equal(Number(countryID));",
													"    pm.expect(jsonData.name).to.eql(regionName);",
													"    ",
													"    pm.collectionVariables.set('coll_regionID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"country\": {\n\t\t\"id\": {{local_countryID}}\n  },\n  \"name\": \"{{local_regionName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/regions",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"regions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Region delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/regions/{{coll_regionID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"regions",
												"{{coll_regionID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Region create agen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Region fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const countryID = pm.variables.get(\"local_countryID\");",
													"    const regionName = pm.variables.get(\"local_regionName\");",
													"",
													"    console.log(\"countryID (variable):\", countryID, \"Type:\", typeof countryID);",
													"    console.log(\"jsonData.country.id:\", jsonData.country.id, \"Type:\", typeof jsonData.country.id);",
													"",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.country.id).to.equal(Number(countryID));",
													"    pm.expect(jsonData.name).to.eql(regionName);",
													"    ",
													"    pm.collectionVariables.set('coll_regionID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"country\": {\n\t\t\"id\": {{local_countryID}}\n  },\n  \"name\": \"{{local_regionName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/regions",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"regions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Region create with same Country and name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"country\": {\n\t\t\"id\": {{local_countryID}}\n  },\n  \"name\": \"{{local_regionName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/regions",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"regions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Region update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Region fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const regionName = pm.variables.get(\"local_regionName_pached\");",
													"    pm.expect(jsonData.name).to.eql(regionName);",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{local_regionName_pached}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/regions/{{coll_regionID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"regions",
												"{{coll_regionID}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "private",
							"item": [
								{
									"name": "Region findAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check Region list length\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.content.length).to.be.gte(1);",
													"",
													"    console.log(\"Length of jsonData.content:\", jsonData.content.length);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/user/geo/regions",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"user",
												"geo",
												"regions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Region getById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/user/geo/regions/{{coll_regionID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"user",
												"geo",
												"regions",
												"{{coll_regionID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"const countryID = pm.collectionVariables.get(\"coll_countryID\");",
									"pm.variables.set(\"local_countryID\", countryID);",
									"",
									"pm.variables.set(\"local_regionName\", \"test_MoscowReg\")",
									"pm.variables.set(\"local_regionName_other\", \"test_MoscowReg_other\")",
									"pm.variables.set(\"local_regionName_pached\", \"test_MoscowReg_pached\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "district",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "District create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check District fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const regionID = pm.variables.get(\"local_regionID\");",
													"    const districtName = pm.variables.get(\"local_districtName\");",
													"",
													"    console.log(\"regionID (variable):\", regionID, \"Type:\", typeof regionID);",
													"    console.log(\"jsonData.country.id:\", jsonData.region.id, \"Type:\", typeof jsonData.region.id);",
													"",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.region.id).to.equal(regionID);",
													"    pm.expect(jsonData.name).to.eql(districtName);",
													"    ",
													"    pm.collectionVariables.set('coll_districtID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"region\": {\n\t\t\"id\": {{local_regionID}}\n  },\n  \"name\": \"{{local_districtName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/districts",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"districts"
											]
										}
									},
									"response": []
								},
								{
									"name": "District delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/districts/{{coll_districtID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"districts",
												"{{coll_districtID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "District create agen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check District fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const regionID = pm.variables.get(\"local_regionID\");",
													"    const districtName = pm.variables.get(\"local_districtName\");",
													"",
													"    console.log(\"regionID (variable):\", regionID, \"Type:\", typeof regionID);",
													"    console.log(\"jsonData.country.id:\", jsonData.region.id, \"Type:\", typeof jsonData.region.id);",
													"",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.region.id).to.equal(regionID);",
													"    pm.expect(jsonData.name).to.eql(districtName);",
													"    ",
													"    pm.collectionVariables.set('coll_districtID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"region\": {\n\t\t\"id\": {{local_regionID}}\n  },\n  \"name\": \"{{local_districtName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/districts",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"districts"
											]
										}
									},
									"response": []
								},
								{
									"name": "District create with same Region and name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409]);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"region\": {\n\t\t\"id\": {{local_regionID}}\n  },\n  \"name\": \"{{local_districtName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/districts",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"districts"
											]
										}
									},
									"response": []
								},
								{
									"name": "District update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check District fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const districName = pm.variables.get(\"local_districtName_pached\");",
													"    pm.expect(jsonData.name).to.eql(districName);",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{local_districtName_pached}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/districts/{{coll_districtID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"districts",
												"{{coll_districtID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "private",
							"item": [
								{
									"name": "District findAll",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check District list length\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.content.length).to.be.gte(1);",
													"",
													"    console.log(\"Length of jsonData.content:\", jsonData.content.length);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/user/geo/districts",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"user",
												"geo",
												"districts"
											]
										}
									},
									"response": []
								},
								{
									"name": "District getById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 and data in json format\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{coll_baseUrl}}/user/geo/districts/{{coll_districtID}}",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"user",
												"geo",
												"districts",
												"{{coll_districtID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.variables.set(\"local_regionID\", Number(pm.collectionVariables.get(\"coll_regionID\")));",
									"",
									"pm.variables.set(\"local_districtName\", \"test_MoscowDistr\")",
									"pm.variables.set(\"local_districtName_other\", \"test_MoscowDistr_other\")",
									"pm.variables.set(\"local_districtName_pached\", \"test_MoscowDistr_pached\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "city",
					"item": [
						{
							"name": "admin",
							"item": [
								{
									"name": "City create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and data in json format\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"pm.test(\"Check City fields\", function () {",
													"    var jsonData = pm.response.json();",
													"    const districtID = pm.variables.get(\"local_districtID\");",
													"    const cityName = pm.variables.get(\"local_cityName\");",
													"",
													"    pm.expect(jsonData.id, 'Must have id').to.not.be.null;",
													"    pm.expect(jsonData.district.id).to.equal(districtID);",
													"    pm.expect(jsonData.name).to.eql(cityName);",
													"    ",
													"    pm.collectionVariables.set('coll_cityID', jsonData.id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": null,\n  \"district\": {\n\t\t\"id\": {{local_districtID}}\n  },\n  \"name\": \"{{local_cityName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{coll_baseUrl}}/admin/geo/cities",
											"host": [
												"{{coll_baseUrl}}"
											],
											"path": [
												"admin",
												"geo",
												"cities"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "private",
							"item": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.variables.set(\"local_districtID\", Number(pm.collectionVariables.get(\"coll_districtID\")));",
									"",
									"pm.variables.set(\"local_cityName\", \"test_MoscowCity\")",
									"pm.variables.set(\"local_cityName_other\", \"test_MoscowCity_other\")",
									"pm.variables.set(\"llocal_cityName_pached\", \"test_MoscowCity_pached\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "street",
					"item": [
						{
							"name": "admin",
							"item": []
						},
						{
							"name": "private",
							"item": []
						}
					]
				},
				{
					"name": "house",
					"item": [
						{
							"name": "admin",
							"item": []
						},
						{
							"name": "private",
							"item": []
						}
					]
				}
			]
		},
		{
			"name": "profile",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "coll_baseUrl",
			"value": "http://localhost:8076/api/v1",
			"type": "string"
		},
		{
			"key": "coll_countryID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_regionID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_districtID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_cityID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_streetID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_houseID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_profileID",
			"value": "",
			"type": "string"
		},
		{
			"key": "coll_userUUID",
			"value": "",
			"type": "string"
		},
		{
			"key": "countryID",
			"value": ""
		}
	]
}