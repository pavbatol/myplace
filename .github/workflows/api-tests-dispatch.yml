name: MyPlace Unit And Postman Tests Dispatch

#  DESCRIPTION
#
#  This workflow runs API tests for the specified environment.
#  Example curl request for testing the API:
#  - Simple Request
#
#      curl -X POST \
#      -H "Accept: application/vnd.github+json" \
#      -H "Authorization: Bearer <your_secret_code>" \
#      -H "X-GitHub-Api-Version: 2022-11-28" \
#      https://api.github.com/repos/pavbatol/myplace-rough/actions/workflows/api-tests-dispatch.yml/dispatches \
#        -d '{
#        "ref": "profile-gh-workflow",
#        "inputs": {
#          "deployment-targets": "security-tests",
#          "environment": "dev"
#        }
#      }'
#
#  - Advanced Request
#
#      env_vars=$(cat <<EOL
#      REDIS_PASSWORD=
#      APP_MAIL_SENDER=test@gmail.com
#      APP_MAIL_HOST=smtp.gmail.com
#      APP_MAIL_PORT=587
#      APP_MAIL_USERNAME=
#      APP_MAIL_PASSWORD=
#      APP_JWT_ACCESS_LIFE_SECONDS=36000
#      APP_JWT_REFRESH_LIFE_SECONDS=2592000
#      SECURITY_ADDITIONAL_SPRING_PROFILES=test-mail-sender-bypassing,test-confirmation-code-reading
#      EOL
#      )
#
#      env_vars_escaped=$(echo "$env_vars" | sed ':a;N;$!ba;s/\n/\\n/g')
#
#      curl -X POST \
#      -H "Accept: application/vnd.github+json" \
#      -H "Authorization: Bearer <your_secret_code>" \
#      -H "X-GitHub-Api-Version: 2022-11-28" \
#      https://api.github.com/repos/pavbatol/myplace-rough/actions/workflows/api-tests-dispatch.yml/dispatches \
#      -d @- <<EOF
#      {
#        "ref": "profile-gh-workflow",
#        "inputs": {
#          "deployment-targets": "security-tests",
#          "environment": "prod",
#          "build-profiles": "check,coverage",
#          "build-skip-tests": true,
#          "security-service-env-vars": "$env_vars_escaped"
#        }
#      }
#      EOF

env:
  _PROD: "prod"
  _DEV: "dev"
  _TEST: "test"

on:
  workflow_dispatch:
    inputs:

      # Project build parameters
      build-profiles:
        description: |
          Choose Maven profiles for building the project (comma-separated, e.g., check,coverage).
          Examples:
           - check:    Run code style checks.
           - coverage: Check and generate reports for tests coverage.
          Default: none.
        required: false
        default: ""
        type: string

      build-skip-tests:
        description: |
          Skip running tests during the build.
          If true, the build will run with `-Dmaven.test.skip=true` (not with `-DskipTests`).
          If false, tests will be executed.
          Default: false.
        required: false
        default: false
        type: boolean

      # Parameters for running Postman tests
      deployment-targets:
        description: |
          Choose targets for Postman tests (comma-separated, e.g., stats-tests,security-tests).
          Available targets:
           - stats-tests:    Run statistics-related tests.
           - security-tests: Run security-related tests.
           - profile-tests:  Run profile-related tests.
           - all-tests:      Run all tests.
          Default: all-tests.
        required: true
        default: "all-tests"
        type: string

      environment:
        description: |
          Choose the environment for Postman tests.
          This will determine which docker-compose file is used:
           - prod: Use docker-compose-prod.yml.
           - dev:  Use docker-compose-dev.yml.
           - test: Use docker-compose-test.yml.
          Default: test.
        required: true
        default: "test"
        type: choice
        options:
          - prod
          - dev
          - test

      security-service-env-vars:
        description: |
          Specify the variables for the security-service ('\n'-separated, e.g.,
            APP_MAIL_SENDER=test@gmail.com
            APP_MAIL_HOST=smtp.gmail.com
            APP_MAIL_PORT=587
            APP_JWT_ACCESS_LIFE_SECONDS=36000
            SECURITY_ADDITIONAL_SPRING_PROFILES=test-mail-sender-bypassing,test-confirmation-code-reading
          )
          From these vars the '.env.security.prod' file will be created.
          Here you can pass SECURITY_ADDITIONAL_SPRING_PROFILES to install additional profiles to test the 'prod' environment.
          NOTE: 
            This step will be in demand only for the 'prod' environment.
          Default: none.
        required: false
        default: ""
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for package-lock.json
        run: |
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json exists"
          else
            echo "package-lock.json does not exist"
          fi

      - name: Cache Node.js modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Newman
        run: npm install -g newman

      - name: Check Newman version
        run: newman --version

      - name: Set up Docker
        uses: docker/setup-docker-action@v3

      - name: Set up Redis
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis
          redis-cli ping

      - name: Set up MongoDB
        run: |
          docker run --name mongodb -d -p 27017:27017 mongo:5.0
          if [ $? -eq 0 ]; then
            echo "MongoDB container started with ID: $(docker ps -aqf "name=mongodb")"
          else
            echo "Failed to start MongoDB container"
            exit 1
          fi          

      - name: Wait for MongoDB to be ready
        run: |
          MAX_RETRIES=10
          count=0
          until curl -s http://localhost:27017/ || [ $count -eq $MAX_RETRIES ]; do
            echo "Waiting for MongoDB to start..."
            sleep 5
            count=$((count + 1))
          done
          if [ $count -eq $MAX_RETRIES ]; then
            echo "MongoDB did not start within the expected time."
            exit 1
          fi

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '12345';"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: List all containers
        run: docker ps -a

      - name: Check Redis
        run: redis-cli ping

      - name: Check MongoDB logs
        run: docker logs mongodb

      - name: Check MongoDB
        run: docker exec mongodb mongo --eval "db.adminCommand('ping')"

      - name: Check PostgreSQL
        run: pg_isready -h localhost -p 5432

      - name: Build Java project
        run: |
          MAVEN_PROFILES=${{ github.event.inputs.build-profiles }}
          MAVEN_PROFILES_OPTION=""
          if [ -n "$MAVEN_PROFILES" ]; then
            MAVEN_PROFILES_OPTION="-P$MAVEN_PROFILES"
          fi
          
          SKIP_TESTS_FLAG=""
          if ${{ github.event.inputs.build-skip-tests }}; then
            SKIP_TESTS_FLAG="-Dmaven.test.skip=true"
          fi
          
          echo "COMMAND: mvn clean package -B -P$MAVEN_PROFILES $SKIP_TESTS_FLAG"
          mvn clean package -B $MAVEN_PROFILES_OPTION $SKIP_TESTS_FLAG

      - name: Set up Docker Compose file
        id: set-compose-file
        working-directory: ./docker
        run: |
          COMPOSE_FILE=docker-compose-${{ github.event.inputs.environment }}.yml
          if [ ! -f "$COMPOSE_FILE" ]; then
            echo "file not found: $COMPOSE_FILE"
            exit 1
          fi
          echo "COMPOSE_FILE=$COMPOSE_FILE" >> $GITHUB_OUTPUT
          echo "Docker Compose file set to: $COMPOSE_FILE"

      - name: Create env.security.prod file
        run: |
          if [ "${{ github.event.inputs.environment }}" = "$_PROD" ]; then
            INPUT_VARS_STRING="${{ github.event.inputs.security-service-env-vars }}"
            ENV_FILE="./docker/security/.env.security.prod"
            
            echo "Debug: INPUT_VARS_STRING content:"
            echo "$INPUT_VARS_STRING"
            echo
            
            echo "Checking if ENV_FILE exists: $ENV_FILE"
            if [ -f "$ENV_FILE" ]; then
              echo "Current content of $ENV_FILE:"
              cat "$ENV_FILE"
              echo
            else
              echo "File $ENV_FILE does not exist, it will be created."
            fi
            
            if [ -n "$INPUT_VARS_STRING" ]; then
              echo "Creating/updating $ENV_FILE with provided environment variables."
               echo -e "$INPUT_VARS_STRING" > "$ENV_FILE"
          
              echo "File $ENV_FILE created/updated with the following content:"
              cat "$ENV_FILE"          
            else
              echo "Input vars string is empty, file $ENV_FILE will not be created/updated."
            fi      
          fi      

#  -------------------------------------------------

      - name: Up env-merger service
        working-directory: ./docker
        run: |
          if [ "${{ github.event.inputs.environment }}" = "$_PROD" ]; then
            COMPOSE_FILE=${{steps.set-compose-file.outputs.COMPOSE_FILE}}
            docker-compose -f $COMPOSE_FILE --profile env-merger up -d
          fi

      - name: Check for global .env
        run: |
          ENV_FILE="./docker/.env"
          if [ ! -f $ENV_FILE ]; then
            echo "File not found: $ENV_FILE"
          else
            echo "Current context for $ENV_FILE"
            cat "$ENV_FILE"
          fi

#-------------------------------------------------

      - name: Build project images
        working-directory: ./docker
        run: |
          COMPOSE_FILE=${{steps.set-compose-file.outputs.COMPOSE_FILE}}
          echo "COMMAND docker-compose -f $COMPOSE_FILE --profile full build"
          docker-compose -f $COMPOSE_FILE --profile full  build

      - name: Check Images
        run: docker images

      - name: Run project
        working-directory: ./docker
        run: |
          COMPOSE_FILE=${{steps.set-compose-file.outputs.COMPOSE_FILE}}
          echo "COMMAND docker-compose -f $COMPOSE_FILE --profile full up -d"
          docker-compose -f $COMPOSE_FILE --profile full up -d

      - name: Check Docker containers
        run: docker ps -a

      - name: Display security-service env vars
        working-directory: ./docker
        run: |
          COMPOSE_FILE=${{steps.set-compose-file.outputs.COMPOSE_FILE}}          
          if docker ps -a --format '{{.Names}}' | grep -q "^mp-security$"; then
            docker-compose -f $COMPOSE_FILE exec security-service env
          else
            echo "Container 'mp-security' not found"
          fi

      - name: Run Postman Tests
        run: |
          IFS=',' read -r -a targets <<< "${{ github.event.inputs.deployment-targets }}"
          
          unique_targets=()
          has_all_tests=false
          for target in "${targets[@]}"; do
            if [[ " ${unique_targets[@]} " =~ " ${target} " ]]; then
              continue
            fi
            if [ "$target" == "all-tests" ]; then
              has_all_tests=true
            fi
            unique_targets+=("$target")
          done
          
          if [ "$has_all_tests" == true ]; then
            echo "Running all-tests"
            newman run postman/MyPlace-mp-profile.postman_collection.json --reporters junit --reporter-junit-export postman-profile-report.xml
            newman run postman/MyPlace-mp-security.postman_collection.json --reporters junit --reporter-junit-export postman-security-report.xml
            newman run postman/MyPlace-mp-stats.postman_collection.json --reporters junit --reporter-junit-export postman-stats-report.xml
            exit 0
          fi
          
          for target in "${unique_targets[@]}"; do
            echo "Running tests for target: $target"
            if [ "$target" == "stats-tests" ]; then
              echo "Running stats-tests"
              newman run postman/MyPlace-mp-stats.postman_collection.json --reporters junit --reporter-junit-export postman-stats-report.xml --disable-unicode --verbose
            elif [ "$target" == "security-tests" ]; then
              echo "Running security-tests"
              newman run postman/MyPlace-mp-security.postman_collection.json --reporters junit --reporter-junit-export postman-security-report.xml --disable-unicode --verbose > newman.log 2>&1
            elif [ "$target" == "profile-tests" ]; then
              echo "Running profile-tests"
              newman run postman/MyPlace-mp-profile.postman_collection.json --reporters junit --reporter-junit-export postman-profile-report.xml --disable-unicode --verbose
            else
              echo "Unknown target: $target"
            fi
          done

      - name: Display Newman log
        run: |
          cat newman.log

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: |
            postman-stats-report.xml
            postman-security-report.xml
            postman-profile-report.xml
            newman.log
