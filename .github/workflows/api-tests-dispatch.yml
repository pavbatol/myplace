name: MyPlace Postman Tests Dispatch

on:
  workflow_dispatch:
    inputs:

      # Project build parameters
      build-profiles:
        description: |
          Choose Maven profiles for building the project (comma-separated, e.g., check,coverage).
          Examples:
           - check:    Run code style checks.
           - coverage: Check and generate reports for tests coverage.
          Default: none.
        required: false
        default: ""
        type: string

      build-skip-tests:
        description: |
          Skip running tests during the build.
          If true, the build will run with `-Dmaven.test.skip=true` (not with `-DskipTests`).
          If false, tests will be executed.
          Default: false.
        required: false
        default: false
        type: boolean

      # Parameters for running Postman tests
      environment:
        description: |
          Choose the environment for Postman tests.
          This will determine which docker-compose file is used:
           - prod: Use docker-compose-prod.yml.
           - dev:  Use docker-compose-dev.yml.
           - test: Use docker-compose-test.yml.
          Default: test.
        required: true
        default: "test"
        type: choice
        options:
          - prod
          - dev
          - test

      additional-spring-profiles:
        description: |
          Choose additional Spring profiles (comma-separated, e.g., test-mail-sender-bypassing,test-confirmation-code-reading).
          Available profiles:
           - test-mail-sender-bypassing:     Bypass email sending.
           - test-confirmation-code-reading: Enable the reading of confirmation codes by responding to API requests.
          Default: none.
        required: false
        default: ""
        type: string

      deployment-targets:
        description: |
          Choose targets for Postman tests (comma-separated, e.g., stats-tests,security-tests).
          Available targets:
           - stats-tests:    Run statistics-related tests.
           - security-tests: Run security-related tests.
           - profile-tests:  Run profile-related tests.
           - all-tests:      Run all tests.
          Default: all-tests.
        required: true
        default: "all-tests"
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-docker-action@v3

      - name: Set up Redis
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis
          redis-cli ping

      - name: Set up MongoDB
        run: |
          docker run --name mongodb -d -p 27017:27017 mongo:5.0
          if [ $? -eq 0 ]; then
            echo "MongoDB container started with ID: $(docker ps -aqf "name=mongodb")"
          else
            echo "Failed to start MongoDB container"
            exit 1
          fi          

      - name: Wait for MongoDB to be ready
        run: |
          MAX_RETRIES=10
          count=0
          until curl -s http://localhost:27017/ || [ $count -eq $MAX_RETRIES ]; do
            echo "Waiting for MongoDB to start..."
            sleep 5
            count=$((count + 1))
          done
          if [ $count -eq $MAX_RETRIES ]; then
            echo "MongoDB did not start within the expected time."
            exit 1
          fi

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '12345';"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: List all containers
        run: docker ps -a

      - name: Check Redis
        run: redis-cli ping

      - name: Check MongoDB logs
        run: docker logs mongodb

      - name: Check MongoDB
        run: docker exec mongodb mongo --eval "db.adminCommand('ping')"

      - name: Check PostgreSQL
        run: pg_isready -h localhost -p 5432

      - name: Build Java project
        run: |
          MAVEN_PROFILES=${{ github.event.inputs.build-profiles }}
          MAVEN_PROFILES_OPTION=""
          if [ -n "$MAVEN_PROFILES" ]; then
            MAVEN_PROFILES_OPTION="-P$MAVEN_PROFILES"
          fi
          
          SKIP_TESTS_FLAG=""
          if ${{ github.event.inputs.build-skip-tests }}; then
            SKIP_TESTS_FLAG="-Dmaven.test.skip=true"
          fi
          
          echo "COMMAND: mvn clean package -B -P$MAVEN_PROFILES $SKIP_TESTS_FLAG"
          mvn clean package -B $MAVEN_PROFILES_OPTION $SKIP_TESTS_FLAG

      - name: Set up Docker Compose file
        working-directory: ./docker
        run: |
          COMPOSE_FILE=docker-compose-${{ github.event.inputs.environment }}.yml
          if [ ! -f "$COMPOSE_FILE" ]; then
            echo "file not found: $COMPOSE_FILE"
            exit 1
          fi
          echo "COMPOSE_FILE=$COMPOSE_FILE" >> $GITHUB_ENV
          echo "Docker Compose file set to: $COMPOSE_FILE"

      - name: Set up Spring profiles option
        id: set-spring-profiles-option
        run: |
          ADDITIONAL_SPRING_PROFILES="${{ github.event.inputs.additional-spring-profiles }}"    
          
          if [ -n "$ADDITIONAL_SPRING_PROFILES" ]; then
            BASE_PROFILE=""          
          
            case ${{ github.event.inputs.environment }} in
              test)
                BASE_PROFILE="test"
                ;;
              dev)
                BASE_PROFILE="develop"
                ;;
              prod)
                BASE_PROFILE="production"
                ;;
              *)
                echo "No matches for the environment: ${{ github.event.inputs.environment }}". 
                exit 1
                ;;
            esac        
          
            SPRING_PROFILES_OPTION="SPRING_PROFILES_ACTIVE=$BASE_PROFILE,$ADDITIONAL_SPRING_PROFILES"
            echo "SPRING_PROFILES_OPTION=$SPRING_PROFILES_OPTION" >> $GITHUB_OUTPUT
            echo "Spring profiles option set to: $SPRING_PROFILES_OPTION" # TODO: not recipe value from $SPRING_PROFILES_OPTION
          else
            echo "SPRING_PROFILES_OPTION=" >> $GITHUB_OUTPUT
            echo "No additional Spring profiles provided."
          fi

      - name: Build project images
        working-directory: ./docker
        run: |
          echo "COMMAND docker-compose -f $COMPOSE_FILE --profile full build"
          docker-compose -f $COMPOSE_FILE --profile full  build

      - name: Run project
        working-directory: ./docker
        run: |
          SPRING_PROFILES_OPTION=${{ steps.set-spring-profiles-option.outputs.SPRING_PROFILES_OPTION }}
          
          if [ -n "$SPRING_PROFILES_OPTION" ]; then
            echo "COMMAND export $SPRING_PROFILES_OPTION"
            export "$SPRING_PROFILES_OPTION"
          fi
          
          echo "COMMAND docker-compose -f $COMPOSE_FILE --profile full up -d"
          docker-compose -f $COMPOSE_FILE --profile full up -d

      - name: Check Docker containers
        run: docker ps -a

      - name: Cache Node.js modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Newman
        run: npm install -g newman

      - name: Check Newman version
        run: newman --version

      - name: Run Postman Tests
        run: |
          IFS=',' read -r -a targets <<< "${{ github.event.inputs.deployment-targets }}"
          for target in "${targets[@]}"; do
            echo "Running tests for target: $target"
            if [ "$target" == "stats-tests" ]; then
              echo "Running stats-tests"
              newman run postman/MyPlace-mp-stats.postman_collection.json --reporters junit --reporter-junit-export postman-stats-report.xml --disable-unicode --verbose
            elif [ "$target" == "security-tests" ]; then
              echo "Running security-tests"
              newman run postman/MyPlace-mp-security.postman_collection.json --reporters junit --reporter-junit-export postman-security-report.xml --disable-unicode --verbose
            elif [ "$target" == "profile-tests" ]; then
              echo "Running profile-tests"
              newman run postman/MyPlace-mp-profile.postman_collection.json --reporters junit --reporter-junit-export postman-profile-report.xml --disable-unicode --verbose
            elif [ "$target" == "all-tests" ]; then
              echo "Running all-tests"
              newman run postman/MyPlace-mp-profile.postman_collection.json --reporters junit --reporter-junit-export postman-profile-report.xml
              newman run postman/MyPlace-mp-security.postman_collection.json --reporters junit --reporter-junit-export postman-security-report.xml
              newman run postman/MyPlace-mp-stats.postman_collection.json --reporters junit --reporter-junit-export postman-stats-report.xml
            else
              echo "Unknown target: $target"
            fi
          done

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: |
            postman-stats-report.xml
            postman-security-report.xml
            postman-profile-report.xml
