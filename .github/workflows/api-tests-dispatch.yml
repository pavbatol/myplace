name: MyPlace Unit And Postman Tests Dispatch

#  DESCRIPTION
#
#  This workflow runs API tests for the specified environment.
#  Example curl request for testing the API:
#  - Simple Request
#
#      curl -X POST \
#      -H "Accept: application/vnd.github+json" \
#      -H "Authorization: Bearer <your_secret_code>" \
#      -H "X-GitHub-Api-Version: 2022-11-28" \
#      https://api.github.com/repos/pavbatol/myplace-rough/actions/workflows/api-tests-dispatch.yml/dispatches \
#        -d '{
#        "ref": "main",
#        "inputs": {
#          "deployment-targets": "security-tests",
#          "environment": "dev"
#        }
#      }'
#
#  - Advanced Request
#
#      curl -X POST \
#      -H "Accept: application/vnd.github+json" \
#      -H "Authorization: Bearer <your_secret_code>" \
#      -H "X-GitHub-Api-Version: 2022-11-28" \
#      https://api.github.com/repos/pavbatol/myplace-rough/actions/workflows/api-tests-dispatch.yml/dispatches \
#      -d @- <<EOF
#      {
#        "ref": "main",
#        "inputs": {
#          "deployment-targets": "security-tests,stats-tests",
#          "environment": "prod",
#          "build-profiles": "check,coverage",
#          "build-skip-tests": true,
#          "override-compose-file": true
#        }
#      }
#      EOF

env:
  _PROD: "prod"

on:
  workflow_dispatch:
    inputs:

      # Project build parameters
      build-profiles:
        description: |
          Choose Maven profiles for building the project (comma-separated, e.g., check,coverage).
          Examples:
           - check:    Run code style checks.
           - coverage: Check and generate reports for tests coverage.
          Default: none.
        required: false
        default: ""
        type: string

      build-skip-tests:
        description: |
          Skip running tests during the build.
          If true, the build will run with `-Dmaven.test.skip=true` (not with `-DskipTests`).
          If false, tests will be executed.
          Default: false.
        required: false
        default: false
        type: boolean

      # Parameters for running Postman tests
      deployment-targets:
        description: |
          Choose targets for Postman tests (comma-separated, e.g., stats-tests,security-tests).
          Available targets:
           - stats-tests:             Run statistics-related tests.
           - security-tests:          Run security-related tests.
           - profile-tests:           Run profile-related tests.
           - gateway-security-tests:  Run gateway-security-related tests.
           - all-tests:               Run all tests.
          Default: all-tests.
        required: true
        default: "all-tests"
        type: string

      environment:
        description: |
          Choose the environment for Postman tests.
          This will determine which docker-compose file is used:
           - prod: Use docker-compose-prod.yml.
           - dev:  Use docker-compose-dev.yml.
           - test: Use docker-compose-test.yml.
          Default: test.
        required: true
        default: "test"
        type: choice
        options:
          - prod
          - dev
          - test

      override-compose-file:
        description: |
          Use additional compose configurations by providing an override file.
          The override file should be placed in 'docker' directory.
          Example file structure:
            - Main compose file:      docker/docker-compose-prod.yml
            - Override compose file:  docker/docker-compose-prod.override.yml
          Default value: false
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Display inputs
        run: echo "${{ toJson(github.event.inputs) }}"

      - name: Cache Node.js modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('./.github/workflows/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install Newman
        run: npm install newman --save-dev

      - name: Check Newman version
        run: newman --version

      - name: Set up Redis
        run: |
          docker run --name redis -d -p 6379:6379 redis:latest
          docker ps -a

      - name: Wait for Redis
        run: |
          timeout 60 bash -c 'until docker exec redis redis-cli ping; do
            echo "Waiting for service to respond..."
            sleep 5
          done && echo "Service is ready!"'

      - name: Set up MongoDB
        run: |
          docker run --name mongodb -d -p 27017:27017 mongo:5.0
          if [ $? -eq 0 ]; then
            echo "MongoDB container started with ID: $(docker ps -aqf "name=mongodb")"
          else
            echo "Failed to start MongoDB container"
            exit 1
          fi          

      - name: Wait for MongoDB to be ready
        run: |
          MAX_RETRIES=10
          count=0
          until docker exec mongodb mongosh --eval "db.adminCommand('ping')" || [ $count -ge $MAX_RETRIES ]; do
            echo "Waiting for MongoDB to start..."
            sleep 5
            count=$((count + 1))
          done
          if [ $count -eq $MAX_RETRIES ]; then
            echo "MongoDB did not start within the expected time."
            exit 1
          fi

      - name: Set up PostgreSQL
        run: |
          docker run --name postgres -d -p 5432:5432 -e POSTGRES_PASSWORD=12345 postgres:latest          
          docker ps -a

      - name: Wait for PostgreSQL
        run: |
          timeout 60 bash -c 'until docker exec postgres pg_isready -U postgres; do
            echo "Waiting for service to respond..."
            sleep 5
          done && echo "Service is ready!"'

      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=1.28.0
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose                    
          echo
          echo "Check uname's"
          echo "OS (uname -s): $(uname -s)"
          echo "Arch (uname -m): $(uname -m)"          
          echo
          echo "Check docker-compose version "
          docker-compose --version

      - name: Set up Docker Compose file
        id: set-compose-file
        working-directory: ./docker
        run: |
          set -e
          
          ENV="${{ github.event.inputs.environment }}"
          OVERRIDE=${{ github.event.inputs.override-compose-file }}
          COMPOSE_FILE="docker-compose-$ENV.yml"
          COMPOSE_OVERRIDE_FILE="docker-compose-$ENV.override.yml"
          
          if [ ! -f "$COMPOSE_FILE" ]; then
            echo "::error::Docker Compose file not found: $COMPOSE_FILE"
            exit 1
          fi
          
          if [ "$OVERRIDE" = "true" ]; then
            if [ ! -f "$COMPOSE_OVERRIDE_FILE" ]; then
              echo "::error::Docker Compose override file not found: $COMPOSE_OVERRIDE_FILE"
              exit 1
            fi
            COMPOSE_FILE="$COMPOSE_FILE:$COMPOSE_OVERRIDE_FILE"
            echo "Override file enabled: $COMPOSE_OVERRIDE_FILE"
          else
            echo "Override file disabled."
          fi
          
          echo "COMPOSE_FILE=$COMPOSE_FILE" >> $GITHUB_ENV
          echo "Docker Compose file set to: $COMPOSE_FILE"

      - name: Build Java project
        run: |
          MAVEN_PROFILES="${{ github.event.inputs.build-profiles }}"
          MAVEN_PROFILES_OPTION=""
          if [ -n "$MAVEN_PROFILES" ]; then
            echo "MAVEN_PROFILES is not empty"
            MAVEN_PROFILES_OPTION="-P$MAVEN_PROFILES"
          else
            echo "MAVEN_PROFILES is empty"          
          fi
          
          SKIP_TESTS_FLAG=""
          if [ "${{ github.event.inputs.build-skip-tests }}" = "true" ]; then
            SKIP_TESTS_FLAG="-Dmaven.test.skip=true"
          fi
          
          echo "COMMAND: mvn clean package -B $MAVEN_PROFILES_OPTION $SKIP_TESTS_FLAG"
          mvn clean package -B $MAVEN_PROFILES_OPTION $SKIP_TESTS_FLAG

      - name: Build project images
        working-directory: ./docker
        run: |
          echo "COMMAND docker-compose --profile full build (with COMPOSE_FILE = $COMPOSE_FILE)"
          docker-compose --profile full build

      - name: Check Images
        run: docker images

      - name: Run project
        working-directory: ./docker
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "COMMAND CONTAINER_MARK=$ENV docker-compose --profile full up -d  (with COMPOSE_FILE = $COMPOSE_FILE)"
          CONTAINER_MARK="$ENV" docker-compose --profile full up -d 

      - name: List all containers
        run: docker ps -a

      - name: Wait for security-service to be ready
        run: |
          ENV="${{ github.event.inputs.environment }}"
          CONTAINER_NAME="mp-security-${ENV}"
          
          echo "Checking if container $CONTAINER_NAME is running..."
          
          CONTAINER_ID=$(docker ps -q -f name="^${CONTAINER_NAME}$")
          if [ -z "$CONTAINER_ID" ]; then
            echo "Error: Container $CONTAINER_NAME is not running."
            exit 1
          else
            echo "Container $CONTAINER_NAME is running with ID: $CONTAINER_ID"
          fi
          
          timeout 60 bash -c "until docker exec $CONTAINER_NAME nc -z localhost 8078; do
            echo 'Waiting for service to respond...'
            sleep 5
          done"
          
          echo "Service is ready!"

      - name: Wait for profile-service to be ready
        run: |
          ENV="${{ github.event.inputs.environment }}"
          CONTAINER_NAME="mp-profile-${ENV}"
          
          timeout 60 bash -c "until docker exec $CONTAINER_NAME nc -z localhost 8076; do
            echo 'Waiting for service to respond...'
            sleep 5
          done"
          echo "Service is ready!"

      - name: Wait for stats-service to be ready
        run: |
          ENV="${{ github.event.inputs.environment }}"
          CONTAINER_NAME="mp-stats-${ENV}"
          
          timeout 60 bash -c "until docker exec $CONTAINER_NAME nc -z localhost 9090; do
            echo 'Waiting for service to respond...'
            sleep 5
          done"
          echo "Service is ready!"

      - name: Run Postman Tests
        run: |
          echo "Running tests with inputs:"
          echo "${{ toJson(github.event.inputs) }}" 
          
          function restart_containers() {
            local readonly ENV="${{ github.event.inputs.environment }}"
                     
            echo "##[group]Performing database reset via container restart"
              
            (
              cd ./docker || { echo "::error::Docker directory not found"; return 1; }
              
              echo "Stopping containers..."
              if ! CONTAINER_MARK="$ENV" docker-compose --profile full down --volumes --remove-orphans; then
                echo "::warning::Some containers could not be stopped"
              fi
              
              sleep 10
              
              echo "Starting containers..."
              if ! CONTAINER_MARK="$ENV" docker-compose --profile full up -d; then
                echo "::error::Failed to start containers"
                return 1
              fi
              
              echo "Waiting for services..."
              sleep 70
              echo "Restarting completed"
            )
          
            local readonly result=$?
            echo "##[endgroup]"
            return $result
          }    
          
          IFS=',' read -r -a targets <<< "${{ github.event.inputs.deployment-targets }}"
          
          unique_targets=()
          has_all_tests=false
          for target in "${targets[@]}"; do
            if [[ " ${unique_targets[@]} " =~ " ${target} " ]]; then
              continue
            fi
            if [ "$target" == "all-tests" ]; then
              has_all_tests=true
            fi
            unique_targets+=("$target")
          done
          
          if [ "$has_all_tests" = true ]; then
            echo "Running all-tests"
            newman run postman/MyPlace-mp-profile.postman_collection.json --reporters cli,junit --reporter-junit-export postman-profile-report.xml > newman.log 2>&1
            newman run postman/MyPlace-mp-security.postman_collection.json --reporters cli,junit --reporter-junit-export postman-security-report.xml > newman.log 2>&1
            newman run postman/MyPlace-mp-stats.postman_collection.json --reporters cli,junit --reporter-junit-export postman-stats-report.xml > newman.log 2>&1
          
            restart_containers || exit 1           
            
            newman run postman/MyPlace-mp-gateway-security.postman_collection.json --reporters cli,junit --reporter-junit-export postman-gateway-security-report.xml > newman.log 2>&1          
            exit 0
          fi
          
          for target in "${unique_targets[@]}"; do
            echo "Running tests for target: $target"
            if [ "$target" == "stats-tests" ]; then
              echo "Running stats-tests"
              newman run postman/MyPlace-mp-stats.postman_collection.json --reporters cli,junit --reporter-junit-export postman-stats-report.xml --disable-unicode --verbose > newman.log 2>&1
            elif [ "$target" == "security-tests" ]; then
              echo "Running security-tests"
              newman run postman/MyPlace-mp-security.postman_collection.json --reporters cli,junit --reporter-junit-export postman-security-report.xml --disable-unicode --verbose > newman.log 2>&1
            elif [ "$target" == "profile-tests" ]; then
              echo "Running profile-tests"
              newman run postman/MyPlace-mp-profile.postman_collection.json --reporters cli,junit --reporter-junit-export postman-profile-report.xml --disable-unicode --verbose > newman.log 2>&1
            elif [ "$target" == "gateway-security-tests" ]; then
              echo "Running gateway-security-tests"
              newman run postman/MyPlace-mp-gateway-security.postman_collection.json --reporters cli,junit --reporter-junit-export postman-gateway-security-report.xml --disable-unicode --verbose > newman.log 2>&1
            else
              echo "Unknown target: $target"
            fi
          done

      - name: Display Newman log
        if: always()
        run: cat newman.log

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test Results
          path: |
            postman-stats-report.xml
            postman-security-report.xml
            postman-profile-report.xml
            postman-gateway-security-report.xml
            newman.log
